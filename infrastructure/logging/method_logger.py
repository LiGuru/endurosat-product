def method_logger_x(method, obj, slogger):    def inner(*args, **kwargs):        ret = method(*args, **kwargs)        slogger.debug(            f'Call method {method.__name__} of {obj} '            f'{"with" if args or kwargs else "-> None"} '            f'{args if args else ""} {kwargs if kwargs else ""} '            f'{"returns" + str(ret)[:250] if ret else ""} '            f'{" ... [ " + str(len(ret)) + " ]" if len(str(ret)) > 250 else ""}')        return ret    return innerclass MethodLogger:    def __getattribute__(self, key):        slogger = super().__getattribute__("slogger")        value = super().__getattribute__(key)        if callable(value) and not key.startswith('__'):            return method_logger_x(value, self, slogger)        return value